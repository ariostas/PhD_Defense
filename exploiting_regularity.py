from manim import *
from manim_editor import PresentationSectionType

class ExploitingRegularity(Scene):
    def construct(self):
        
        title = Title(r"Exploiting regularity to explore the landscape", font_size=50)
        
        t0 = Tex(r"Regularity of triangulations was extensively studied by Gelfand,\\Kapranov, and Zelevinsky (GKZ).", tex_environment="flushleft", font_size=40).next_to(title, DOWN, buff=0.5).to_edge(LEFT, buff=1)
        t1 = Tex("Let's look at the GKZ vector of a triangulation.", font_size=40).next_to(t0, DOWN, buff=0.5).to_edge(LEFT, buff=1)
        t2 = MathTex(r"\varphi_i=\sum_{p_i\in\text{vert}(\sigma)}\text{vol}(\sigma)", font_size=40).to_edge(LEFT, buff=1).shift(DOWN)
        
        t3 = MathTex(r"\varphi=\begin{pmatrix} \ \  \\ \\ \\ \\ \end{pmatrix}", font_size=50).to_edge(RIGHT, buff=1.5).shift(DOWN*1.5)
        
        axes = Axes(
            x_range=[-1, 1, 1],
            y_range=[-1, 1, 1],
            x_length=2.5,
            y_length=2.5,
            tips=False,
        ).to_edge(DOWN, buff=0.5)
        
        pts_s1 = [[0.5,0.5],[0.5,-0.5],[-0.5,-0.5],[-0.5,0.5]]
        dots_s1 = [Dot(point=axes.c2p(*pt), color=TEAL).set_z_index(5) for pt in pts_s1]
        s1 = Polygon(*[axes.c2p(*pt) for pt in pts_s1], stroke_color=PURE_RED).set_z_index(2)
        l1 = Line(start=axes.c2p(*pts_s1[0]), end=axes.c2p(*pts_s1[2]), color=PURE_RED).set_z_index(2)
        lables_s1 = [Tex("1").next_to(dots_s1[3], UP, buff=0.1),
                     Tex("2").next_to(dots_s1[0], UP, buff=0.1),
                     Tex("3").next_to(dots_s1[1], DOWN, buff=0.1),
                     Tex("4").next_to(dots_s1[2], DOWN, buff=0.1),
                    ]
        triangs_s1 = [Polygon(*[axes.c2p(*pt) for pt in [pts_s1[3],pts_s1[2],pts_s1[0]]], stroke_opacity=0, fill_opacity=1, fill_color=GOLD),
                      Polygon(*[axes.c2p(*pt) for pt in [pts_s1[1],pts_s1[2],pts_s1[0]]], stroke_opacity=0, fill_opacity=1, fill_color=GOLD),
                     ]
        numbers = [Tex("1", font_size=50).next_to(t3, UP, buff=-0.5).shift(RIGHT*0.6),
                   Tex("2", font_size=50).next_to(t3, UP, buff=-1.1).shift(RIGHT*0.6),
                   Tex("1", font_size=50).next_to(t3, UP, buff=-1.7).shift(RIGHT*0.6),
                   Tex("2", font_size=50).next_to(t3, UP, buff=-2.3).shift(RIGHT*0.6),
                    ]
        
        pts_s2 = [[0,-1],[1,1],[1,-1],[-1,-1],[-1,1]]
        extra_pts = [[-1,0],[0,0],[1,0],[0,1]]
        dots_s2 = [Dot(point=axes.c2p(*pt), color=TEAL).set_z_index(5) for pt in pts_s2]
        dots_extra = [Dot(point=axes.c2p(*pt), color=DARK_GRAY).set_z_index(5) for pt in extra_pts]
        s2 = Polygon(*[axes.c2p(*pt) for pt in pts_s2[1:]], stroke_color=PURE_RED).set_z_index(2)
        
        template = VGroup(*dots_s2, *dots_extra, s2)
        
        tr1 = template.copy()
        tr1.add(Line(start=axes.c2p(*pts_s2[0]), end=axes.c2p(*pts_s2[1]), color=PURE_RED).set_z_index(2))
        tr1.add(Line(start=axes.c2p(*pts_s2[0]), end=axes.c2p(*pts_s2[4]), color=PURE_RED).set_z_index(2))
        
        tr2 = template.copy()
        tr2.add(Line(start=axes.c2p(*pts_s2[4]), end=axes.c2p(*pts_s2[0]), color=PURE_RED).set_z_index(2))
        tr2.add(Line(start=axes.c2p(*pts_s2[4]), end=axes.c2p(*pts_s2[2]), color=PURE_RED).set_z_index(2))
        
        tr3 = template.copy()
        tr3.add(Line(start=axes.c2p(*pts_s2[4]), end=axes.c2p(*pts_s2[2]), color=PURE_RED).set_z_index(2))
        
        tr4 = template.copy()
        tr4.add(Line(start=axes.c2p(*pts_s2[1]), end=axes.c2p(*pts_s2[3]), color=PURE_RED).set_z_index(2))
        
        tr5 = template.copy()
        tr5.add(Line(start=axes.c2p(*pts_s2[1]), end=axes.c2p(*pts_s2[3]), color=PURE_RED).set_z_index(2))
        tr5.add(Line(start=axes.c2p(*pts_s2[1]), end=axes.c2p(*pts_s2[0]), color=PURE_RED).set_z_index(2))
        
        triangs = [tr3,tr4,tr5,tr1,tr2]
        for i in range(5):
            triangs[i].scale(0.5)
            triangs[i].center()
            triangs[i].shift(RIGHT*2.5*(i-2))
            
        t4 = Tex(r"Secondary polytope: $\mathcal{A}=\text{Conv}\{\varphi(\mathcal{T}) | \mathcal{T} \text{ a triangulation}\}$", font_size=40).next_to(title, DOWN, buff=0.5).to_edge(LEFT, buff=1)
        t5 = Tex("Vertices correspond to regular triangulations.", font_size=40).next_to(t4, DOWN, buff=0.3).to_edge(LEFT, buff=1)
        
        t6 = Tex(r"Bounding the vertices gives us\\a bound for the number of triangulations", font_size=40).next_to(t5, DOWN, buff=0.5).to_edge(RIGHT, buff=1)
        t7 = MathTex(r"N_{\text{FRST}}\leq \begin{pmatrix}dV-1\\ n-2\end{pmatrix}", font_size=40).next_to(t6, DOWN, buff=0.5)
        t7_2 = MathTex(r"N_{\text{FRST}}\leq \begin{pmatrix}14,112\\ 494\end{pmatrix}\approx 1.58\times 10^{928}", font_size=40).next_to(t6, DOWN, buff=0.5)
        
        t8 = Tex(r"With some extra work one can bound\\the number of inequivalent CYs", font_size=40).next_to(t5, DOWN, buff=0.5).to_edge(RIGHT, buff=1)
        t9 = MathTex(r"N_{\text{CY}}\leq 1.65\times 10^{428}", font_size=40).next_to(t8, DOWN, buff=0.5)
        
        t10 = Tex(r"The normal cone at each vertex gives us the set of heights that\\gives rise to that triangulation.", tex_environment="flushleft", font_size=40).next_to(title, DOWN, buff=0.5).to_edge(LEFT, buff=1)
        t11 = Tex("Gluing them all together they form the secondary fan.", font_size=40).next_to(t10, DOWN, buff=0.3).to_edge(LEFT, buff=1)
        
        pts_secondary = [[0,0],[1,1],[1,2],[-1,2],[-1,1]]
        dots_secondary = [Dot(point=axes.c2p(*pt), color=YELLOW).set_z_index(5) for pt in pts_secondary]
        secondary = Polygon(*[axes.c2p(*pt) for pt in pts_secondary], stroke_color=WHITE).set_z_index(2)
        
        axes2d = Axes(
            x_range=[-4, 4, 1],
            y_range=[-4, 4, 1],
            x_length=5,
            y_length=5,
            tips=False,
        ).to_edge(LEFT).shift(DOWN)
        
        cone1 = AnnularSector(inner_radius=0, outer_radius=1.5, arc_center=axes2d.c2p(0,0), start_angle=0, angle=39.2*PI/180, fill_opacity=1, stroke_opacity=0, fill_color=GOLD)
        cone2 = AnnularSector(inner_radius=0, outer_radius=1.5, arc_center=axes2d.c2p(0,0), start_angle=39.2*PI/180, angle=(180-2*39.2)*PI/180, fill_opacity=1, stroke_opacity=0, fill_color=PURE_RED)
        cone3 = AnnularSector(inner_radius=0, outer_radius=1.5, arc_center=axes2d.c2p(0,0), start_angle=(180-39.2)*PI/180, angle=39.2*PI/180, fill_opacity=1, stroke_opacity=0, fill_color=PURE_GREEN)
        cone4 = AnnularSector(inner_radius=0, outer_radius=1.5, arc_center=axes2d.c2p(0,0), start_angle=PI, angle=PI/2, fill_opacity=1, stroke_opacity=0, fill_color=TEAL)
        cone5 = AnnularSector(inner_radius=0, outer_radius=1.5, arc_center=axes2d.c2p(0,0), start_angle=3*PI/2, angle=PI/2, fill_opacity=1, stroke_opacity=0, fill_color=PURPLE)
        
        cone1p = AnnularSector(inner_radius=0, outer_radius=0.5, arc_center=axes.c2p(-1,1), start_angle=0, angle=39.2*PI/180, fill_opacity=1, stroke_opacity=0, fill_color=GOLD)
        cone2p = AnnularSector(inner_radius=0, outer_radius=0.5, arc_center=axes.c2p(0,0), start_angle=39.2*PI/180, angle=(180-2*39.2)*PI/180, fill_opacity=1, stroke_opacity=0, fill_color=PURE_RED)
        cone3p = AnnularSector(inner_radius=0, outer_radius=0.5, arc_center=axes.c2p(1,1), start_angle=(180-39.2)*PI/180, angle=39.2*PI/180, fill_opacity=1, stroke_opacity=0, fill_color=PURE_GREEN)
        cone4p = AnnularSector(inner_radius=0, outer_radius=0.5, arc_center=axes.c2p(1,2), start_angle=PI, angle=PI/2, fill_opacity=1, stroke_opacity=0, fill_color=TEAL)
        cone5p = AnnularSector(inner_radius=0, outer_radius=0.5, arc_center=axes.c2p(-1,2), start_angle=3*PI/2, angle=PI/2, fill_opacity=1, stroke_opacity=0, fill_color=PURPLE)
        
        self.next_section("ExploitingRegularity 0", PresentationSectionType.NORMAL)
        self.play(Write(title))
        self.next_section("ExploitingRegularity 1", PresentationSectionType.NORMAL)
        self.play(FadeIn(t0))
        self.next_section("ExploitingRegularity 2", PresentationSectionType.NORMAL)
        self.play(FadeIn(t1))
        self.play(Write(t2))
        self.next_section("ExploitingRegularity 3", PresentationSectionType.NORMAL)
        self.play(*[Create(o) for o in [s1,l1]+dots_s1])
        self.next_section("ExploitingRegularity 4", PresentationSectionType.NORMAL)
        self.play(AnimationGroup(*[Write(l) for l in lables_s1], lag_ratio=0.1))
        self.play(FadeIn(t3))
        self.next_section("ExploitingRegularity 5", PresentationSectionType.NORMAL)
        self.play(dots_s1[3].animate.set_color(YELLOW))
        self.play(FadeIn(triangs_s1[0]))
        self.next_section("ExploitingRegularity 6", PresentationSectionType.NORMAL)
        self.play(ReplacementTransform(triangs_s1[0].copy(), numbers[0]))
        self.next_section("ExploitingRegularity 7", PresentationSectionType.NORMAL)
        self.play(dots_s1[3].animate.set_color(TEAL), FadeOut(triangs_s1[0]))
        self.play(dots_s1[0].animate.set_color(YELLOW))
        self.play(FadeIn(triangs_s1[0]), FadeIn(triangs_s1[1]))
        self.next_section("ExploitingRegularity 8", PresentationSectionType.NORMAL)
        self.play(ReplacementTransform(VGroup(triangs_s1[0].copy(), triangs_s1[1].copy()), numbers[1]))
        self.next_section("ExploitingRegularity 9", PresentationSectionType.NORMAL)
        self.play(dots_s1[0].animate.set_color(TEAL), FadeOut(triangs_s1[0]), FadeOut(triangs_s1[1]), run_time=0.5)
        self.play(dots_s1[1].animate.set_color(YELLOW), run_time=0.5)
        self.play(FadeIn(triangs_s1[1]), run_time=0.5)
        self.play(ReplacementTransform(triangs_s1[1].copy(), numbers[2]), run_time=0.5)
        self.play(dots_s1[1].animate.set_color(TEAL), FadeOut(triangs_s1[1]), run_time=0.5)
        self.play(dots_s1[2].animate.set_color(YELLOW), run_time=0.5)
        self.play(FadeIn(triangs_s1[0]), FadeIn(triangs_s1[1]), run_time=0.5)
        self.play(ReplacementTransform(VGroup(triangs_s1[0].copy(), triangs_s1[1].copy()), numbers[3]), run_time=0.5)
        self.play(dots_s1[2].animate.set_color(TEAL), FadeOut(triangs_s1[0]), FadeOut(triangs_s1[1]), run_time=0.5)
        self.next_section("ExploitingRegularity 10", PresentationSectionType.NORMAL)
        self.play(*[FadeOut(o) for o in [t0,t1,t2,t3,l1]+numbers+dots_s1+lables_s1], ReplacementTransform(s1,s2))
        self.play(*[FadeIn(o) for o in dots_s2+dots_extra])
        self.wait(0.1)
        self.next_section("ExploitingRegularity 11", PresentationSectionType.NORMAL)
        self.play(FadeIn(t4))
        self.next_section("ExploitingRegularity 12", PresentationSectionType.NORMAL)
        self.play(FadeIn(t5))
        self.next_section("ExploitingRegularity 13", PresentationSectionType.NORMAL)
        self.play(AnimationGroup(*[ReplacementTransform(template.copy(), t) for t in triangs], lag_ratio=0.1))
        self.wait(0.1)
        self.next_section("ExploitingRegularity 14", PresentationSectionType.NORMAL)
        self.play(*[FadeOut(o) for o in dots_s2+dots_extra+[s2]])
        self.play(  tr1.animate.scale(0.75).next_to(secondary, DOWN, buff=0.2),
                    tr2.animate.scale(0.75).next_to(secondary, RIGHT, buff=0.2).shift(DOWN*00.3),
                    tr3.animate.scale(0.75).next_to(secondary, RIGHT, buff=0.2).shift(UP*1.5),
                    tr4.animate.scale(0.75).next_to(secondary, LEFT, buff=0.2).shift(UP*1.5),
                    tr5.animate.scale(0.75).next_to(secondary, LEFT, buff=0.2).shift(DOWN*0.3)
                 )
        self.play(*[FadeIn(o) for o in [secondary]+dots_secondary])
        self.next_section("ExploitingRegularity 15", PresentationSectionType.NORMAL)
        self.play(*[FadeOut(o) for o in triangs],
                  *[o.animate.shift(LEFT*4) for o in dots_secondary+[secondary]]
        )
        self.play(FadeIn(t6))
        self.next_section("ExploitingRegularity 16", PresentationSectionType.NORMAL)
        self.play(FadeIn(t7))
        self.next_section("ExploitingRegularity 17", PresentationSectionType.NORMAL)
        self.play(ReplacementTransform(t7, t7_2))
        self.wait(0.1)
        self.next_section("ExploitingRegularity 18", PresentationSectionType.NORMAL)
        self.play(FadeOut(t6), FadeOut(t7_2))
        self.play(FadeIn(t8), FadeIn(t9))
        self.next_section("ExploitingRegularity 19", PresentationSectionType.NORMAL)
        self.play(FadeOut(t8), FadeOut(t9), FadeOut(t4), FadeOut(t5))
        self.play(*[o.animate.shift(RIGHT*4) for o in dots_secondary+[secondary]], FadeIn(t10))
        self.play(*[FadeIn(o) for o in [cone1p, cone2p, cone3p, cone4p, cone5p]])
        self.next_section("ExploitingRegularity 20", PresentationSectionType.NORMAL)
        self.play(FadeIn(t11))
        self.play(*[ReplacementTransform(i,j) for i,j in [[cone1p,cone1],[cone2p,cone2],[cone3p,cone3],[cone4p,cone4],[cone5p,cone5]]])
        self.next_section("ExploitingRegularity 21", PresentationSectionType.SKIP)
        self.play(*[FadeOut(o) for o in [t10, t11,secondary,title]+dots_secondary], *[o.animate.shift(UP) for o in [cone1,cone2,cone3,cone4,cone5]])